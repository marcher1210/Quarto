/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dk.marcher.quarto.ui;

import dk.marcher.quarto.ui.listeners.PoolListener;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Point;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;

/**
 *
 * @author marcher89
 */
public class PoolPanel extends javax.swing.JPanel {

    private JLabel[] labels = new JLabel[16];
    private int[] pieces = new int[16];
    private final PoolListener poolListener;

    /**
     * Only used for Netbeans GUI
     */
    public PoolPanel(){
        this(null);
    }
    
    /**
     * Creates new form PoolPanel
     */
    public PoolPanel(PoolListener poolListener) {
        this.poolListener = poolListener;
        initComponents();
        for (int i = 0; i < 16; i++) {
            labels[i] = new JLabel();
            labels[i].setBorder(new EmptyBorder(2, 2, 2, 2));
            add(labels[i]);
        }
        refillPool();
    }

    public final void refillPool() {
        ArrayList<Integer> ints = new ArrayList<>(16);
        for (int i = 0; i < 16; i++) {
            ints.add(i);
        }
        Collections.shuffle(ints);
        for (int i = 0; i < 16; i++) {
            pieces[i] = ints.get(i);
            labels[i].setIcon(new ImageIcon(PieceUI.getPieceImage(pieces[i])));
        }
    }

    public void removePiece(int piece) {
        for (int i = 0; i < 16; i++) {
            if (pieces[i] == piece) {
                pieces[i] = -1;
                labels[i].setIcon(new ImageIcon(PieceUI.getBlankImage()));
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 102, 204));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                poolClicked(evt);
            }
        });
        setLayout(new java.awt.GridLayout(2, 8));
    }// </editor-fold>//GEN-END:initComponents

    private void poolClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_poolClicked
        Dimension boardSize = getSize();
        Point location = evt.getPoint();
        int relX = (int) (location.getX() / boardSize.getWidth() * 8);
        int relY = (int) (location.getY() / boardSize.getHeight() * 2);
        int piece = pieces[relY * 8 + relX];
        if (piece < 0) {
            return;
        }
        poolListener.pieceChosen(piece);
    }//GEN-LAST:event_poolClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
